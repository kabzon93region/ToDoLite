import sys
import os
import threading
import time
import subprocess
import signal
from pystray import Icon, Menu, MenuItem
from PIL import Image, ImageDraw
import tkinter as tk
from tkinter import scrolledtext
import webbrowser

class TaskManagerTray:
    def __init__(self):
        self.server_process = None
        self.console_window = None
        self.console_text = None
        self.is_console_visible = False
        self.is_server_running = False
        
        # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç—Ä–µ—è
        self.icon = self.create_icon()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Å–æ–ª–∏
        self.create_console_window()
        
    def create_icon(self):
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
        image = Image.new('RGB', (64, 64), color='blue')
        draw = ImageDraw.Draw(image)
        draw.rectangle([16, 16, 48, 48], fill='white')
        draw.text((20, 25), "üìù", fill='black')
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Ç—Ä–µ—è
        menu = Menu(
            MenuItem("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–Ω—Å–æ–ª—å", self.toggle_console),
            MenuItem("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", self.start_server, enabled=lambda item: not self.is_server_running),
            MenuItem("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", self.restart_server),
            MenuItem("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", self.stop_server, enabled=lambda item: self.is_server_running),
            Menu.SEPARATOR,
            MenuItem("–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ", self.open_browser),
            MenuItem("–í—ã—Ö–æ–¥", self.quit_app)
        )
        
        return Icon("–ó–∞–¥–∞—á–Ω–∏–∫", image, menu=menu)
    
    def create_console_window(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Å–æ–ª–∏"""
        self.console_window = tk.Tk()
        self.console_window.title("–ó–∞–¥–∞—á–Ω–∏–∫ - –ö–æ–Ω—Å–æ–ª—å")
        self.console_window.geometry("800x600")
        self.console_window.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.console_text = scrolledtext.ScrolledText(
            self.console_window, 
            wrap=tk.WORD, 
            state=tk.DISABLED,
            font=('Consolas', 10)
        )
        self.console_text.pack(fill=tk.BOTH, expand=True)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.console_window.protocol("WM_DELETE_WINDOW", self.hide_console)
    
    def log_message(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if self.console_text:
            self.console_text.config(state=tk.NORMAL)
            self.console_text.insert(tk.END, f"{time.strftime('%H:%M:%S')} - {message}\n")
            self.console_text.see(tk.END)
            self.console_text.config(state=tk.DISABLED)
            self.console_window.update()
    
    def toggle_console(self, icon=None, item=None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å"""
        if self.is_console_visible:
            self.hide_console()
        else:
            self.show_console()
    
    def show_console(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å"""
        if self.console_window:
            self.console_window.deiconify()
            self.console_window.lift()
            self.console_window.focus_force()
            self.is_console_visible = True
            self.log_message("–ö–æ–Ω—Å–æ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∞")
    
    def hide_console(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å"""
        if self.console_window:
            self.console_window.withdraw()
            self.is_console_visible = False
            self.log_message("–ö–æ–Ω—Å–æ–ª—å —Å–∫—Ä—ã—Ç–∞")
    
    def start_server(self, icon=None, item=None):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        if self.is_server_running:
            self.log_message("–°–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            self.log_message("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            self.server_process = subprocess.Popen(
                [sys.executable, "app.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            self.is_server_running = True
            self.log_message("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞
            threading.Thread(target=self.read_server_output, daemon=True).start()
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def stop_server(self, icon=None, item=None):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        if not self.is_server_running:
            self.log_message("–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            self.log_message("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            
            if self.server_process:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                self.server_process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                try:
                    self.server_process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
                    self.server_process.kill()
                    self.server_process.wait()
                
                self.server_process = None
            
            self.is_server_running = False
            self.log_message("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def restart_server(self, icon=None, item=None):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä"""
        self.log_message("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        self.stop_server()
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        self.start_server()
    
    def read_server_output(self):
        """–ß–∏—Ç–∞–µ—Ç –≤—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        if self.server_process:
            try:
                for line in iter(self.server_process.stdout.readline, ''):
                    if line:
                        self.log_message(line.strip())
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    
    def open_browser(self, icon=None, item=None):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–Ω–∏–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            webbrowser.open("http://localhost:5000")
            self.log_message("–û—Ç–∫—Ä—ã—Ç –±—Ä–∞—É–∑–µ—Ä")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    
    def quit_app(self, icon=None, item=None):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.log_message("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
        if self.is_server_running:
            self.stop_server()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
        if self.console_window:
            self.console_window.quit()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è
        self.icon.stop()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        self.log_message("–ó–∞–¥–∞—á–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω")
        self.log_message("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –Ω–∞ –∏–∫–æ–Ω–∫–µ –≤ —Ç—Ä–µ–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        self.start_server()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è
        self.icon.run()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import pystray
        from PIL import Image
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pystray", "Pillow"])
        print("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = TaskManagerTray()
    app.run()
